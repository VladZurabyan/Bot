import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

TOKEN = os.getenv("TOKEN")  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –∑–∞–¥–∞–Ω–∞ –Ω–∞ Render

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_clicked")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user

    if query.data == "start_clicked":
        message = (
            f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
            "–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ TON."
        )
        await context.bot.send_message(chat_id=query.message.chat_id, text=message)

        # –ö–Ω–æ–ø–∫–∞ –∞–¥—Ä–µ—Å–∞
        ton_keyboard = [[InlineKeyboardButton("üíé –£–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å TON", callback_data="get_ton")]]
        reply_markup = InlineKeyboardMarkup(ton_keyboard)
        await context.bot.send_message(chat_id=query.message.chat_id, text="üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É:", reply_markup=reply_markup)

    elif query.data == "get_ton":
        ton_address = "EQC1234567890TONaddress..."  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å
        ton_message = "üíé –ê–¥—Ä–µ—Å TON:\n`" + ton_address + "`"
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=ton_message,
            parse_mode="Markdown"
        )

# –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def block_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.delete()
    except:
        pass

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, block_messages))
    app.run_polling()
