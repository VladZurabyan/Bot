import os
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

TOKEN = os.getenv("TOKEN")  # –ó–∞–¥–∞–π TOKEN —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    with open("welcome.jpg", "rb") as photo:
        caption = f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ TON."
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo, caption=caption)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å" —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏
loading_frames = ["üåë", "üåì", "üåî", "üåï", "üåù", "üåû", "üöÄ"]
msg = await context.bot.send_message(chat_id=chat_id, text="‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏...")

for frame in loading_frames:
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"{frame} –ù–∞—á–∞—Ç—å", callback_data="start_clicked")]
    ])
    await msg.edit_reply_markup(reply_markup=keyboard)
    await asyncio.sleep(0.4)

# –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∫–Ω–æ–ø–∫–∏
final_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_clicked")]
])
await msg.edit_text("üëá –ì–æ—Ç–æ–≤–æ! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=final_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    user = query.from_user

    if query.data == "start_clicked":
        await context.bot.send_message(chat_id=chat_id, text="‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–¥—Ä–µ—Å–∞ TON...")
        await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥

        ton_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üíé –£–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å TON", callback_data="get_ton")]
        ])
        await context.bot.send_message(chat_id=chat_id, text="–ì–æ—Ç–æ–≤–æ! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=ton_keyboard)

    elif query.data == "get_ton":
        ton_address = "EQC1234567890TONaddress..."  # ‚Üê –í–°–¢–ê–í–¨ –°–í–û–ô TON-–ê–î–†–ï–°
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üíé –ê–¥—Ä–µ—Å TON:\n`{ton_address}`",
            parse_mode="Markdown"
        )

# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫)
async def block_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.delete()
    except:
        pass

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, block_messages))
    app.run_polling()
