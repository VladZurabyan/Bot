import os
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

TOKEN = os.getenv("TOKEN")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    with open("welcome.jpg", "rb") as photo:
        caption = f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ TON."
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo, caption=caption)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å" ‚Äî –ø–æ —Ü–µ–Ω—Ç—Ä—É
    start_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_clicked")]
    ])
    await update.message.reply_text("üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=start_keyboard)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    user = query.from_user

    if query.data == "start_clicked":
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–¥—Ä–µ—Å–∞ TON..."
        )

        # –ó–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5)

        # –ö–Ω–æ–ø–∫–∞ "–£–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å TON" ‚Äî –ø–æ —Ü–µ–Ω—Ç—Ä—É
        ton_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üíé –£–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å TON", callback_data="get_ton")]
        ])
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ì–æ—Ç–æ–≤–æ! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=ton_keyboard
        )

    elif query.data == "get_ton":
        ton_address = "EQC1234567890TONaddress..."  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π TON –∞–¥—Ä–µ—Å
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üíé –ê–¥—Ä–µ—Å TON:\n`{ton_address}`",
            parse_mode="Markdown"
        )

async def block_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.delete()
    except:
        pass

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, block_messages))
    app.run_polling()
