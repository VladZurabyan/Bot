import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

TOKEN = os.getenv("TOKEN")  # –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    with open("welcome.jpg", "rb") as photo:
        caption = (
            f"‚ú®\n\n"
            f"üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!* üåü\n\n"
            f"_–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ TON._\n\n"
            f"‚ú®"
        )
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo,
            caption=caption,
            parse_mode="Markdown"
        )

    # –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(5)

    # –ö–Ω–æ–ø–∫–∞ ‚Äî –æ–¥–Ω–∞ –∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üíé –£–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å TON", callback_data="get_ton")]
    ])
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üëá",
        reply_markup=keyboard
    )

# –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "get_ton":
        ton_address = "EQC1234567890TONaddress..."  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π TON-–∞–¥—Ä–µ—Å
        message = (
            f"üíé *TON –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*\n\n"
            f"`{ton_address}`"
        )
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=message,
            parse_mode="Markdown"
        )

# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def block_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.delete()
    except:
        pass

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, block_messages))
    app.run_polling()
