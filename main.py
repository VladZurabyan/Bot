import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

TOKEN = os.getenv("TOKEN")  # –ó–∞–¥–∞–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    with open("welcome.jpg", "rb") as photo:
        caption = f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ TON."
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo, caption=caption)

    # –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(5)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å TON"
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üíé –£–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å TON", callback_data="get_ton")]
    ])
    await context.bot.send_message(chat_id=update.effective_chat.id, text="üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "get_ton":
        ton_address = "EQC1234567890TONaddress..."  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –∞–¥—Ä–µ—Å
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"üíé –ê–¥—Ä–µ—Å TON:\n`{ton_address}`",
            parse_mode="Markdown"
        )

# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def block_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.delete()
    except:
        pass

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, block_messages))
    app.run_polling()
